Context:
We need DEV-only helpers to fix login without wiping the DB: list users and reset a user password.
These endpoints must be enabled only when APP_ENV != "prod".

Change scope:
Create/Edit ONLY:
- app/config.py
- app/routers/dev_tools.py
- app/main.py
- requirements.txt (ensure passlib[bcrypt] exists)

Task:
1) requirements.txt:
   - Ensure: passlib[bcrypt]==1.7.4 (or compatible)

2) app/config.py (if missing, create):
------------------------------------------------
from pydantic_settings import BaseSettings
from functools import lru_cache

class Settings(BaseSettings):
    APP_ENV: str = "local"  # 'local' enables DEV endpoints; set 'prod' to disable

@lru_cache
def get_settings() -> Settings:
    return Settings()
------------------------------------------------

3) app/routers/dev_tools.py (create):
------------------------------------------------
from fastapi import APIRouter, Depends, HTTPException
from sqlmodel import Session, select
from passlib.context import CryptContext

from app.config import get_settings
from app.db import get_session
from app.models.user import User  # must exist from your JWT setup

router = APIRouter(prefix="/dev", tags=["dev"])
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def ensure_dev():
    settings = get_settings()
    if settings.APP_ENV == "prod":
        raise HTTPException(status_code=403, detail="DEV tools disabled in prod")
    return True

@router.get("/users")
def list_users(_: bool = Depends(ensure_dev), session: Session = Depends(get_session)):
    users = session.exec(select(User)).all()
    return [
        {"id": u.id, "email": u.email, "nombre": u.nombre, "role": u.role, "employee_id": u.employee_id}
        for u in users
    ]

@router.post("/reset-password")
def reset_password(payload: dict, _: bool = Depends(ensure_dev), session: Session = Depends(get_session)):
    email = payload.get("email")
    new_password = payload.get("new_password")
    if not email or not new_password:
        raise HTTPException(status_code=400, detail="email y new_password son obligatorios")

    user = session.exec(select(User).where(User.email == email)).first()
    if not user:
        raise HTTPException(status_code=404, detail="Usuario no encontrado")

    user.password_hash = pwd_context.hash(new_password)
    session.add(user)
    session.commit()
    return {"ok": True}
------------------------------------------------

4) app/main.py:
   - include the dev router:
     from app.routers import dev_tools
     app.include_router(dev_tools.router)

5) Ensure APP_ENV is NOT 'prod' in your environment (default is 'local').
   If needed, set APP_ENV=local in your Replit Secrets.
   
Acceptance:
- GET /dev/users returns the list of users when APP_ENV != 'prod'.
- POST /dev/reset-password with {email, new_password} updates hash.
- After reset, POST /auth/login with the new password returns access_token.
- When APP_ENV='prod', /dev/* returns 403.
